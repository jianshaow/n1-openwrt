name: Build OpenWrt
on:
  workflow_dispatch:
    inputs:
      package:
        description: "archive packages or not"
        required: false
        default: "no"
      image:
        description: "build images or not"
        required: false
        default: "yes"
      release:
        description: "upload to release or not"
        required: false
        default: "no"
env:
  OP_REPO: jianshaow/lede
  OP_REPO_BRANCH: master
  BUILD_REPO_PATH: ${{ github.workspace }}/build
  OP_REPO_PATH: ${{ github.workspace }}/lede
  ARTIFACT_PATH: ${{ github.workspace }}/artifact
  BEFORE_FEED_SH: before-feed.sh
  BEFORE_CONFIG_SH: before-config.sh
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Prepare environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        #docker rmi `docker images -q`
        #sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        #sudo -E apt-mark hold grub-efi-amd64-signed
        #sudo -E apt update
        #sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo timedatectl set-timezone "$TZ"
        df -h
        sudo mkdir /mnt/lede
        sudo chown $USER:$GROUPS /mnt/lede
        ln -s /mnt/lede ${{ github.workspace }}/lede
        ls ${{ github.workspace }}
    - name: Checkout build script
      uses: actions/checkout@v4
      with:
        path: ${{ env.BUILD_REPO_PATH }}
    - name: Checkout op sources
      uses: actions/checkout@v4
      with:
        repository: ${{ env.OP_REPO }}
        ref: ${{ env.OP_REPO_BRANCH }}
        path: ${{ env.OP_REPO_PATH }}
    - name: Update feeds
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        $BUILD_REPO_PATH/$BEFORE_FEED_SH
        scripts/feeds update -a
        scripts/feeds install -a
    - name: Generate configuration file
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        cp $BUILD_REPO_PATH/.config ./
        ls -lrta
        $BUILD_REPO_PATH/$BEFORE_CONFIG_SH
        make defconfig
    - name: Make download
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile firmware
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
    - name: Package Armvirt as OpenWrt
      if: github.event.inputs.image == 'yes'
      uses: jianshaow/openwrt_packit@master
      env:
        OPENWRT_ARMVIRT: lede/bin/targets/*/*/*.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_VERSION_NAME: 5.15.77
        WHOAMI: cooljj
    - name: Prepare build info artifact
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        mkdir -p $ARTIFACT_PATH/buildinfo
        cp .config feeds.conf.default $ARTIFACT_PATH/buildinfo/
        cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") $ARTIFACT_PATH/buildinfo/
    - name: Prepare packages artifact
      if: github.event.inputs.package == 'yes'
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        mkdir -p $ARTIFACT_PATH/package
        cp -rf $(find bin/packages/ -type f -name "*.ipk") $ARTIFACT_PATH/package/
    - name: Prepare firmwares artifact
      if: github.event.inputs.image != 'yes'
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        mkdir -p $ARTIFACT_PATH/firmware
        cp -rf $(find ./bin/targets/ -type f -name "*.tar.gz") $ARTIFACT_PATH/firmware/
    - name: Prepare images artifact
      if: github.event.inputs.image == 'yes'
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        mkdir -p $ARTIFACT_PATH/images
        cp -rf $PACKAGED_OUTPUTPATH/*.img.gz $ARTIFACT_PATH/images/
    - name: Upload artifact directory
      uses: actions/upload-artifact@v3
      with:
        name: OpenWrt-n1_Artifact-${{ env.PACKAGED_OUTPUTDATE }}
        path: ${{ env.ARTIFACT_PATH }}
